package swam
package wasi
import cats.effect.IO
import swam.runtime.Memory

object Types {
  // This is an autogenerated file, do not change it

  object subclockflagsFlags extends Enumeration {
    val subscription_clock_abstime = Value(0)
  }

  type ciovec_array = List[ciovec]
  type exitcode = u32
  case class `prestat`(mem: Memory[IO], offset: Int) extends WASI_STRUCT { // UNION
    val `dir` = prestat_dir(mem, offset + 0)

    def write(offset: Int, mem: Memory[IO]) = {
      dir.write(offset + 0, mem)
    }
  }

  type inode = u64
  type fd = Int

  object adviceEnum extends Enumeration {

    val `normal` = Value

    val `sequential` = Value

    val `random` = Value

    val `willneed` = Value

    val `dontneed` = Value

    val `noreuse` = Value
  }
  type s64 = Long
  type u8 = Byte

  case class `fdstat`(`fs_filetype`: Byte, `fs_flags`: Short, `fs_rights_base`: Long, `fs_rights_inheriting`: Long)
      extends WASI_STRUCT {

    def write(offset: Int, mem: Memory[IO]) = {
      mem.writeByte(offset + 0, (`fs_filetype` & 0xff).toByte)

      mem.writeShort(offset + 2, `fs_flags`)

      mem.writeLong(offset + 6, `fs_rights_base`)

      mem.writeLong(offset + 14, `fs_rights_inheriting`)

    }
  }

  case class `ciovec`(mem: Memory[IO], offset: Int) extends WASI_STRUCT {
    val `buf` = new Pointer[u8](mem.readInt(offset).unsafeRunSync,
                                (i) => (mem.readByte(i).unsafeRunSync() & 0xff).toByte,
                                (i, r) => mem.writeByte(i, (`r` & 0xff).toByte))
    val `buf_len` = mem.readInt(offset + 4).unsafeRunSync

    def write(offset: Int, mem: Memory[IO]) = {
      mem.writeInt(offset + 0, `buf`.offset)

      mem.writeInt(offset + 4, `buf_len`)

    }
  }

  object signalEnum extends Enumeration {

    val `none` = Value

    val `hup` = Value

    val `int` = Value

    val `quit` = Value

    val `ill` = Value

    val `trap` = Value

    val `abrt` = Value

    val `bus` = Value

    val `fpe` = Value

    val `kill` = Value

    val `usr1` = Value

    val `segv` = Value

    val `usr2` = Value

    val `pipe` = Value

    val `alrm` = Value

    val `term` = Value

    val `chld` = Value

    val `cont` = Value

    val `stop` = Value

    val `tstp` = Value

    val `ttin` = Value

    val `ttou` = Value

    val `urg` = Value

    val `xcpu` = Value

    val `xfsz` = Value

    val `vtalrm` = Value

    val `prof` = Value

    val `winch` = Value

    val `poll` = Value

    val `pwr` = Value

    val `sys` = Value
  }
  type dirnamlen = u32
  type userdata = u64
  case class `subscription_clock`(mem: Memory[IO], offset: Int) extends WASI_STRUCT {
    val `id` = mem.readInt(offset + 0).unsafeRunSync & 0xffffffff

    val `timeout` = mem.readLong(offset + 4).unsafeRunSync & 0XFFFFFFFFFFFFFFFFL

    val `precision` = mem.readLong(offset + 12).unsafeRunSync & 0XFFFFFFFFFFFFFFFFL

    val `flags` = (mem.readShort(offset + 20).unsafeRunSync & 0xffff).toShort

    def write(offset: Int, mem: Memory[IO]) = {
      mem.writeInt(offset + 0, `id`)

      mem.writeLong(offset + 4, `timeout`)

      mem.writeLong(offset + 12, `precision`)

      mem.writeShort(offset + 20, `flags`)

    }
  }

  object eventtypeEnum extends Enumeration {

    val `clock` = Value

    val `fd_read` = Value(0x0000000000000002)

    val `fd_write` = Value(0x0000000000000040)
  }
  type filesize = u64
  type u32 = Int
  type filedelta = s64
  object errnoEnum extends Enumeration {

    val `success` = Value

    val `2big` = Value

    val `acces` = Value

    val `addrinuse` = Value

    val `addrnotavail` = Value

    val `afnosupport` = Value

    val `again` = Value

    val `already` = Value

    val `badf` = Value

    val `badmsg` = Value

    val `busy` = Value

    val `canceled` = Value

    val `child` = Value

    val `connaborted` = Value

    val `connrefused` = Value

    val `connreset` = Value

    val `deadlk` = Value

    val `destaddrreq` = Value

    val `dom` = Value

    val `dquot` = Value

    val `exist` = Value

    val `fault` = Value

    val `fbig` = Value

    val `hostunreach` = Value

    val `idrm` = Value

    val `ilseq` = Value

    val `inprogress` = Value

    val `intr` = Value

    val `inval` = Value

    val `io` = Value

    val `isconn` = Value

    val `isdir` = Value

    val `loop` = Value

    val `mfile` = Value

    val `mlink` = Value

    val `msgsize` = Value

    val `multihop` = Value

    val `nametoolong` = Value

    val `netdown` = Value

    val `netreset` = Value

    val `netunreach` = Value

    val `nfile` = Value

    val `nobufs` = Value

    val `nodev` = Value

    val `noent` = Value

    val `noexec` = Value

    val `nolck` = Value

    val `nolink` = Value

    val `nomem` = Value

    val `nomsg` = Value

    val `noprotoopt` = Value

    val `nospc` = Value

    val `nosys` = Value

    val `notconn` = Value

    val `notdir` = Value

    val `notempty` = Value

    val `notrecoverable` = Value

    val `notsock` = Value

    val `notsup` = Value

    val `notty` = Value

    val `nxio` = Value

    val `overflow` = Value

    val `ownerdead` = Value

    val `perm` = Value

    val `pipe` = Value

    val `proto` = Value

    val `protonosupport` = Value

    val `prototype` = Value

    val `range` = Value

    val `rofs` = Value

    val `spipe` = Value

    val `srch` = Value

    val `stale` = Value

    val `timedout` = Value

    val `txtbsy` = Value

    val `xdev` = Value

    val `notcapable` = Value
  }
  object lookupflagsFlags extends Enumeration {
    val symlink_follow = Value(0)
  }

  type timestamp = u64
  type size = u32
  case class `dirent`(mem: Memory[IO], offset: Int) extends WASI_STRUCT {
    val `d_next` = mem.readLong(offset + 0).unsafeRunSync & 0XFFFFFFFFFFFFFFFFL

    val `d_ino` = mem.readLong(offset + 8).unsafeRunSync & 0XFFFFFFFFFFFFFFFFL

    val `d_namlen` = mem.readInt(offset + 16).unsafeRunSync & 0xffffffff

    val `d_type` = (mem.readByte(offset + 20).unsafeRunSync() & 0xff).toByte

    def write(offset: Int, mem: Memory[IO]) = {
      mem.writeLong(offset + 0, `d_next`)

      mem.writeLong(offset + 8, `d_ino`)

      mem.writeInt(offset + 16, `d_namlen`)

      mem.writeByte(offset + 20, (`d_type` & 0xff).toByte)

    }
  }

  case class `subscription_fd_readwrite`(mem: Memory[IO], offset: Int) extends WASI_STRUCT {
    val `file_descriptor` = mem.readInt(offset + 0).unsafeRunSync

    def write(offset: Int, mem: Memory[IO]) = {
      mem.writeInt(offset + 0, `file_descriptor`)

    }
  }

  case class `event`(mem: Memory[IO], offset: Int) extends WASI_STRUCT {
    val `userdata` = mem.readLong(offset + 0).unsafeRunSync & 0XFFFFFFFFFFFFFFFFL

    val `error` = (mem.readShort(offset + 8).unsafeRunSync & 0xffff).toShort

    val `type` = (mem.readByte(offset + 12).unsafeRunSync() & 0xff).toByte

    val `fd_readwrite` = event_fd_readwrite(mem, offset + 14)

    def write(offset: Int, mem: Memory[IO]) = {
      mem.writeLong(offset + 0, `userdata`)

      mem.writeShort(offset + 8, `error`)

      mem.writeByte(offset + 12, (`type` & 0xff).toByte)

      fd_readwrite.write(offset + 14, mem)
    }
  }

  case class `filestat`(mem: Memory[IO], offset: Int) extends WASI_STRUCT {
    val `dev` = mem.readLong(offset + 0).unsafeRunSync & 0XFFFFFFFFFFFFFFFFL

    val `ino` = mem.readLong(offset + 8).unsafeRunSync & 0XFFFFFFFFFFFFFFFFL

    val `filetype` = (mem.readByte(offset + 16).unsafeRunSync() & 0xff).toByte

    val `nlink` = mem.readLong(offset + 18).unsafeRunSync & 0XFFFFFFFFFFFFFFFFL

    val `size` = mem.readLong(offset + 26).unsafeRunSync & 0XFFFFFFFFFFFFFFFFL

    val `atim` = mem.readLong(offset + 34).unsafeRunSync & 0XFFFFFFFFFFFFFFFFL

    val `mtim` = mem.readLong(offset + 42).unsafeRunSync & 0XFFFFFFFFFFFFFFFFL

    val `ctim` = mem.readLong(offset + 50).unsafeRunSync & 0XFFFFFFFFFFFFFFFFL

    def write(offset: Int, mem: Memory[IO]) = {
      mem.writeLong(offset + 0, `dev`)

      mem.writeLong(offset + 8, `ino`)

      mem.writeByte(offset + 16, (`filetype` & 0xff).toByte)

      mem.writeLong(offset + 18, `nlink`)

      mem.writeLong(offset + 26, `size`)

      mem.writeLong(offset + 34, `atim`)

      mem.writeLong(offset + 42, `mtim`)

      mem.writeLong(offset + 50, `ctim`)

    }
  }

  object filetypeEnum extends Enumeration {

    val `unknown` = Value

    val `block_device` = Value

    val `character_device` = Value

    val `directory` = Value

    val `regular_file` = Value

    val `socket_dgram` = Value

    val `socket_stream` = Value

    val `symbolic_link` = Value
  }
  object sdflagsFlags extends Enumeration {
    val rd = Value(0)

    val wr = Value(1)
  }

  case class `subscription`(mem: Memory[IO], offset: Int) extends WASI_STRUCT {
    val `userdata` = mem.readLong(offset + 0).unsafeRunSync & 0XFFFFFFFFFFFFFFFFL

    val `u` = subscription_u(mem, offset + 8)

    def write(offset: Int, mem: Memory[IO]) = {
      mem.writeLong(offset + 0, `userdata`)

      u.write(offset + 8, mem)
    }
  }

  type string = String
  object fstflagsFlags extends Enumeration {
    val atim = Value(0)

    val atim_now = Value(1)

    val mtim = Value(2)

    val mtim_now = Value(3)
  }

  object roflagsFlags extends Enumeration {
    val recv_data_truncated = Value(0)
  }

  type dircookie = u64
  type iovec_array = List[iovec]
  object riflagsFlags extends Enumeration {
    val recv_peek = Value(0)

    val recv_waitall = Value(1)
  }

  case class `event_fd_readwrite`(mem: Memory[IO], offset: Int) extends WASI_STRUCT {
    val `nbytes` = mem.readLong(offset + 0).unsafeRunSync & 0XFFFFFFFFFFFFFFFFL

    val `flags` = (mem.readShort(offset + 8).unsafeRunSync & 0xffff).toShort

    def write(offset: Int, mem: Memory[IO]) = {
      mem.writeLong(offset + 0, `nbytes`)

      mem.writeShort(offset + 8, `flags`)

    }
  }

  type u64 = Long
  case class `subscription_u`(mem: Memory[IO], offset: Int) extends WASI_STRUCT { // UNION
    val `clock` = subscription_clock(mem, offset + 0)
    val `fd_read` = subscription_fd_readwrite(mem, offset + 24)
    val `fd_write` = subscription_fd_readwrite(mem, offset + 28)

    def write(offset: Int, mem: Memory[IO]) = {
      clock.write(offset + 0, mem)
      fd_read.write(offset + 24, mem)
      fd_write.write(offset + 28, mem)
    }
  }

  object clockidEnum extends Enumeration {

    val `realtime` = Value

    val `monotonic` = Value

    val `process_cputime_id` = Value

    val `thread_cputime_id` = Value
  }
  case class `iovec`(mem: Memory[IO], offset: Int) extends WASI_STRUCT {
    val `buf` = new Pointer[u8](mem.readInt(offset).unsafeRunSync,
                                (i) => (mem.readByte(i).unsafeRunSync() & 0xff).toByte,
                                (i, r) => mem.writeByte(i, (`r` & 0xff).toByte))
    val `buf_len` = mem.readInt(offset + 8).unsafeRunSync & 0xffffffff

    def write(offset: Int, mem: Memory[IO]) = {
      mem.writeInt(offset + 0, `buf`.offset)

      mem.writeInt(offset + 8, `buf_len`)

    }
  }

  object oflagsFlags extends Enumeration {
    val creat = Value(0)

    val directory = Value(1)

    val excl = Value(2)

    val trunc = Value(3)
  }

  object whenceEnum extends Enumeration {

    val `set` = Value

    val `cur` = Value

    val `end` = Value
  }
  type siflags = u16
  type linkcount = u64
  object rightsFlags extends Enumeration {
    val fd_datasync = Value(0x0000000000000001)

    val fd_read = Value(0x0000000000000002)

    val fd_seek = Value(0x0000000000000004)

    val fd_fdstat_set_flags = Value(0x0000000000000008)

    val fd_sync = Value(0x0000000000000010)

    val fd_tell = Value(0x0000000000000020)

    val fd_write = Value(0x0000000000000040)

    val fd_advise = Value(0x0000000000000080)

    val fd_allocate = Value(0x0000000000000100)

    val path_create_directory = Value(0x0000000000000200)

    val path_create_file = Value(0x0000000000000400)

    val path_link_source = Value(0x0000000000000800)

    val path_link_target = Value(0x0000000000001000)

    val path_open = Value(0x0000000000002000)

    val fd_readdir = Value(0x0000000000004000)

    val path_readlink = Value(0x0000000000008000)

    val path_rename_source = Value(0x0000000000010000)

    val path_rename_target = Value(0x0000000000020000)

    val path_filestat_get = Value(0x0000000000040000)

    val path_filestat_set_size = Value(0x0000000000080000)

    val path_filestat_set_times = Value(0x0000000000100000)

    val fd_filestat_get = Value(0x0000000000200000)

    val fd_filestat_set_size = Value(0x0000000000400000)

    val fd_filestat_set_times = Value(0x0000000000800000)

    val path_symlink = Value(0x0000000001000000)

    val path_remove_directory = Value(0x0000000002000000)

    val path_unlink_file = Value(0x0000000004000000)

    val poll_fd_readwrite = Value(0x0000000008000000)

    val sock_shutdown = Value(0x0000000010000000)
  }

  object preopentypeEnum extends Enumeration {

    val `dir` = Value
  }
  object eventrwflagsFlags extends Enumeration {
    val fd_readwrite_hangup = Value(0)
  }

  object fdflagsFlags extends Enumeration {
    val append = Value(0)

    val dsync = Value(1)

    val nonblock = Value(2)

    val rsync = Value(3)

    val sync = Value(4)
  }

  val RIGHTS_ALL = rightsFlags.fd_datasync.id | rightsFlags.fd_read.id | rightsFlags.fd_seek.id | rightsFlags.fd_fdstat_set_flags.id | rightsFlags.fd_sync.id | rightsFlags.fd_tell.id | rightsFlags.fd_write.id | rightsFlags.fd_advise.id | rightsFlags.fd_allocate.id | rightsFlags.fd_filestat_get.id | rightsFlags.fd_filestat_set_size.id | rightsFlags.fd_filestat_set_times.id |
    rightsFlags.poll_fd_readwrite.id | rightsFlags.path_create_directory.id | rightsFlags.path_create_file.id | rightsFlags.path_link_source.id | rightsFlags.path_link_target.id | rightsFlags.path_open.id |
    rightsFlags.fd_readdir.id | rightsFlags.path_readlink.id | rightsFlags.path_rename_source.id | rightsFlags.path_rename_target.id | rightsFlags.fd_filestat_get.id | rightsFlags.fd_filestat_set_size.id | rightsFlags.fd_filestat_set_times.id | rightsFlags.path_symlink.id | rightsFlags.path_remove_directory.id | rightsFlags.path_unlink_file.id | rightsFlags.poll_fd_readwrite.id | rightsFlags.sock_shutdown.id

  val RIGHTS_REGULAR_FILE_BASE = rightsFlags.fd_datasync.id | rightsFlags.fd_read.id | rightsFlags.fd_seek.id | rightsFlags.fd_fdstat_set_flags.id | rightsFlags.fd_sync.id | rightsFlags.fd_tell.id | rightsFlags.fd_write.id | rightsFlags.fd_advise.id | rightsFlags.fd_allocate.id | rightsFlags.fd_filestat_get.id | rightsFlags.fd_filestat_set_size.id | rightsFlags.fd_filestat_set_times.id |
    rightsFlags.poll_fd_readwrite.id
  val RIGHTS_REGULAR_FILE_INHERITING = 0

  val RIGHTS_BLOCK_DEVICE_INHERITING = RIGHTS_ALL
  val RIGHTS_CHARACTER_DEVICE_BASE = RIGHTS_ALL
  val RIGHTS_CHARACTER_DEVICE_INHERITING = RIGHTS_ALL

  val RIGHTS_DIRECTORY_BASE = rightsFlags.fd_fdstat_set_flags.id | rightsFlags.fd_sync.id | rightsFlags.fd_advise.id | rightsFlags.path_create_directory.id | rightsFlags.path_create_file.id | rightsFlags.path_link_source.id | rightsFlags.path_link_target.id | rightsFlags.path_open.id | rightsFlags.fd_readdir.id | rightsFlags.path_readlink.id | rightsFlags.path_rename_source.id | rightsFlags.path_rename_target.id | rightsFlags.path_filestat_get.id |
    rightsFlags.fd_filestat_set_size.id | rightsFlags.fd_filestat_set_times.id | rightsFlags.fd_filestat_get.id | rightsFlags.fd_filestat_set_times.id | rightsFlags.path_symlink.id | rightsFlags.path_unlink_file.id | rightsFlags.path_remove_directory.id | rightsFlags.poll_fd_readwrite.id
  val RIGHTS_DIRECTORY_INHERITING = RIGHTS_DIRECTORY_BASE | RIGHTS_REGULAR_FILE_BASE

  val RIGHTS_SOCKET_BASE = rightsFlags.fd_read.id | rightsFlags.fd_fdstat_set_flags.id | rightsFlags.fd_write.id | rightsFlags.fd_filestat_get.id | rightsFlags.poll_fd_readwrite.id | rightsFlags.sock_shutdown.id
  val RIGHTS_SOCKET_INHERITING = RIGHTS_ALL;
  type device = u64
  type u16 = Short
  case class `prestat_dir`(mem: Memory[IO], offset: Int) extends WASI_STRUCT {
    val `pr_name_len` = mem.readInt(offset + 0).unsafeRunSync & 0xffffffff

    def write(offset: Int, mem: Memory[IO]) = {
      mem.writeInt(offset + 0, `pr_name_len`)

    }
  }

}
