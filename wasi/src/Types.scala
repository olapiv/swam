package swam
package wasi

import java.nio.ByteBuffer


object Types {

	// This is an autogenerated file, do not change it

	object subclockflagsFlags extends Enumeration {
		val subscription_clock_abstime = Value(0)
	}

	type ciovec_array = List[ciovec]
	type exitcode = u32

	case class `prestat`(mem: ByteBuffer, offset: Int) extends WASI_STRUCT { // UNION
		val `dir` = prestat_dir(mem, offset + 0)

		def write(offset: Int, mem: ByteBuffer) = {
			dir.write(offset, mem)
		}
	}

	type inode = u64
	type fd = Int

	object adviceEnum extends Enumeration {
		val `normal`, `sequential`, `random`, `willneed`, `dontneed`, `noreuse` = Value
	}

	type s64 = Long
	type u8 = Byte

	case class `fdstat`(`fs_filetype`: Byte,  `fs_flags`: Short, `fs_rights_base` : Long, `fs_rights_inheriting`: Long) extends WASI_STRUCT {



		def write(offset: Int, mem: ByteBuffer) = {

			/* WASI JS
			  this.view.setUint8(bufPtr, stats.filetype); // FILETYPE u8
        this.view.setUint16(bufPtr + 2, 0, true); // FDFLAG u16
        this.view.setUint16(bufPtr + 4, 0, true); // FDFLAG u16
        this.view.setBigUint64(bufPtr + 8, stats.rights.base, true); // u64
        this.view.setBigUint64(
          bufPtr + 8 + 8, stats.rights.inheriting, true,
        );

			 */
			mem.put(offset, `fs_filetype`)

			mem.putShort(offset + 2, `fs_flags`)

			mem.putShort(offset + 4, `fs_flags`)

			mem.putLong(offset + 8, `fs_rights_base`)

			mem.putLong(offset + 8 + 8, `fs_rights_inheriting`)

		}
	}

	case class `ciovec`(mem: ByteBuffer, offset: Int) extends WASI_STRUCT {
		val `buf` = new Pointer[u8](mem.getInt(offset), (i) => mem.get(i)
			, (i, r) => mem.put(i, `r`)
		)
		val `buf_len` = mem.getInt(offset + 4)


		def write(offset: Int, mem: ByteBuffer) = {
			mem.putInt(offset, `buf`.offset)
			mem.putInt(offset + 4, `buf_len`)

		}

		override def toString = s"$offset, $buf_len"
	}

	object signalEnum extends Enumeration {
		val `none`, `hup`, `int`, `quit`, `ill`, `trap`, `abrt`, `bus`, `fpe`, `kill`, `usr1`, `segv`, `usr2`, `pipe`, `alrm`, `term`, `chld`, `cont`, `stop`, `tstp`, `ttin`, `ttou`, `urg`, `xcpu`, `xfsz`, `vtalrm`, `prof`, `winch`, `poll`, `pwr`, `sys` = Value
	}

	type dirnamlen = u32
	type userdata = u64

	case class `subscription_clock`(mem: ByteBuffer, offset: Int) extends WASI_STRUCT {
		val `id` = mem.getInt(offset + 0)

		val `timeout` = mem.getLong(offset + 4)

		val `precision` = mem.getLong(offset + 12)

		val `flags` = mem.getShort(offset + 20)


		def write(offset: Int, mem: ByteBuffer) = {
			mem.putInt(offset + 0, `id`)

			mem.putLong(offset + 4, `timeout`)

			mem.putLong(offset + 12, `precision`)

			mem.putShort(offset + 20, `flags`)

		}
	}

	object eventtypeEnum extends Enumeration {
		val `clock`, `fd_read`, `fd_write` = Value
	}

	type filesize = u64
	type u32 = Int
	type filedelta = s64

	object errnoEnum extends Enumeration {
		val `success` = Value(0)
		val `2big`, `acces`, `addrinuse`, `addrnotavail`, `afnosupport`, `again`, `already`, `badf`, `badmsg`, `busy`, `canceled`, `child`, `connaborted`, `connrefused`, `connreset`, `deadlk`, `destaddrreq`, `dom`, `dquot`, `exist`, `fault`, `fbig`, `hostunreach`, `idrm`, `ilseq`, `inprogress`, `intr`, `inval`, `io`, `isconn`, `isdir`, `loop`, `mfile`, `mlink`, `msgsize`, `multihop`, `nametoolong`, `netdown`, `netreset`, `netunreach`, `nfile`, `nobufs`, `nodev`, `noent`, `noexec`, `nolck`, `nolink`, `nomem`, `nomsg`, `noprotoopt`, `nospc`, `nosys`, `notconn`, `notdir`, `notempty`, `notrecoverable`, `notsock`, `notsup`, `notty`, `nxio`, `overflow`, `ownerdead`, `perm`, `pipe`, `proto`, `protonosupport`, `prototype`, `range`, `rofs`, `spipe`, `srch`, `stale`, `timedout`, `txtbsy`, `xdev`, `notcapable` = Value
	}

	object lookupflagsFlags extends Enumeration {
		val symlink_follow = Value(0)
	}

	type timestamp = u64
	type size = u32

	case class `dirent`(mem: ByteBuffer, offset: Int) extends WASI_STRUCT {
		val `d_next` = mem.getLong(offset + 0)

		val `d_ino` = mem.getLong(offset + 8)

		val `d_namlen` = mem.getInt(offset + 16)

		val `d_type` = mem.get(offset + 20)


		def write(offset: Int, mem: ByteBuffer) = {
			mem.putLong(offset + 0, `d_next`)

			mem.putLong(offset + 8, `d_ino`)

			mem.putInt(offset + 16, `d_namlen`)

			mem.put(offset + 20, `d_type`)

		}
	}

	case class `subscription_fd_readwrite`(mem: ByteBuffer, offset: Int) extends WASI_STRUCT {
		val `file_descriptor` = mem.getInt(offset + 0)


		def write(offset: Int, mem: ByteBuffer) = {
			mem.putInt(offset + 0, `file_descriptor`)

		}
	}

	case class `event`(mem: ByteBuffer, offset: Int) extends WASI_STRUCT {
		val `userdata` = mem.getLong(offset + 0)

		val `error` = mem.getShort(offset + 8)

		val `type` = mem.get(offset + 10)

		val `fd_readwrite` = event_fd_readwrite(mem, offset + 11)

		def write(offset: Int, mem: ByteBuffer) = {
			mem.putLong(offset + 0, `userdata`)

			mem.putShort(offset + 8, `error`)

			mem.put(offset + 10, `type`)

			fd_readwrite.write(offset + 11, mem)
		}
	}

	case class `filestat`(mem: ByteBuffer, offset: Int) extends WASI_STRUCT {
		val `dev` = mem.getLong(offset + 0)

		val `ino` = mem.getLong(offset + 8)

		val `filetype` = mem.get(offset + 16)

		val `nlink` = mem.getLong(offset + 17)

		val `size` = mem.getLong(offset + 25)

		val `atim` = mem.getLong(offset + 33)

		val `mtim` = mem.getLong(offset + 41)

		val `ctim` = mem.getLong(offset + 49)


		def write(offset: Int, mem: ByteBuffer) = {
			mem.putLong(offset + 0, `dev`)

			mem.putLong(offset + 8, `ino`)

			mem.put(offset + 16, `filetype`)

			mem.putLong(offset + 17, `nlink`)

			mem.putLong(offset + 25, `size`)

			mem.putLong(offset + 33, `atim`)

			mem.putLong(offset + 41, `mtim`)

			mem.putLong(offset + 49, `ctim`)

		}
	}

	object filetypeEnum extends Enumeration {
		val `unknown`, `block_device`, `character_device`, `directory`, `regular_file`, `socket_dgram`, `socket_stream`, `symbolic_link` = Value
	}

	object sdflagsFlags extends Enumeration {
		val rd = Value(0)
		val wr = Value(1)
	}

	case class `subscription`(mem: ByteBuffer, offset: Int) extends WASI_STRUCT {
		val `userdata` = mem.getLong(offset + 0)

		val `u` = subscription_u(mem, offset + 8)

		def write(offset: Int, mem: ByteBuffer) = {
			mem.putLong(offset + 0, `userdata`)

			`u`.write(offset + 8, mem)
		}
	}

	type string = String

	object fstflagsFlags extends Enumeration {
		val atim = Value(0)
		val atim_now = Value(1)
		val mtim = Value(2)
		val mtim_now = Value(3)
	}

	object roflagsFlags extends Enumeration {
		val recv_data_truncated = Value(0)
	}

	type dircookie = u64
	type iovec_array = List[iovec]

	object riflagsFlags extends Enumeration {
		val recv_peek = Value(0)
		val recv_waitall = Value(1)
	}

	case class `event_fd_readwrite`(mem: ByteBuffer, offset: Int) extends WASI_STRUCT {
		val `nbytes` = mem.getLong(offset + 0)

		val `flags` = mem.getShort(offset + 8)


		def write(offset: Int, mem: ByteBuffer) = {
			mem.putLong(offset + 0, `nbytes`)

			mem.putShort(offset + 8, `flags`)

		}
	}

	type u64 = Long

	case class `subscription_u`(mem: ByteBuffer, offset: Int) extends WASI_STRUCT { // UNION
		val `clock` = subscription_clock(mem, offset + 0)
		val `fd_read` = subscription_fd_readwrite(mem, offset + 22)
		val `fd_write` = subscription_fd_readwrite(mem, offset + 26)

		def write(offset: Int, mem: ByteBuffer) = {
			clock.write(offset, mem)
			fd_read.write(offset + 22, mem)
			fd_write.write(offset + 26, mem)
		}
	}

	object clockidEnum extends Enumeration {
		val `realtime`, `monotonic`, `process_cputime_id`, `thread_cputime_id` = Value
	}

	case class `iovec`(mem: ByteBuffer, offset: Int) extends WASI_STRUCT {
		val `buf` = new Pointer[u8](mem.getInt(offset), (i) => mem.get(i)
			, (i, r) => mem.put(i, `r`)
		)
		val `buf_len` = mem.getInt(offset + 4)


		def write(offset: Int, mem: ByteBuffer) = {
			mem.putInt(offset, `buf`.offset)
			mem.putInt(offset + 4, `buf_len`)
		}
	}

	object oflagsFlags extends Enumeration {
		val creat = Value(0)
		val directory = Value(1)
		val excl = Value(2)
		val trunc = Value(3)
	}

	object whenceEnum extends Enumeration {
		val `set`, `cur`, `end` = Value
	}

	type siflags = u16
	type linkcount = u64

	object rightsFlags extends Enumeration {
		val fd_datasync = Value(0x0000000000000001)
		val fd_read = Value(0x0000000000000002)
		val fd_seek = Value(0x0000000000000004)
		val fd_fdstat_set_flags = Value(0x0000000000000008)
		val fd_sync = Value(0x0000000000000010)
		val fd_tell = Value(0x0000000000000020)
		val fd_write = Value(0x0000000000000040)
		val fd_advise = Value(0x0000000000000080)
		val fd_allocate = Value(0x0000000000000100)
		val path_create_directory = Value(0x0000000000000200)
		val path_create_file = Value(0x0000000000000400)
		val path_link_source = Value(0x0000000000000800)
		val path_link_target = Value(0x0000000000001000)
		val path_open = Value(0x0000000000002000)
		val fd_readdir = Value(0x0000000000004000)
		val path_readlink = Value(0x0000000000008000)
		val path_rename_source = Value(0x0000000000010000)
		val path_rename_target = Value(0x0000000000020000)
		val path_filestat_get = Value(0x0000000000040000)
		val path_filestat_set_size = Value(0x0000000000080000)
		val path_filestat_set_times = Value(0x0000000000100000)
		val fd_filestat_get = Value(0x0000000000200000)
		val fd_filestat_set_size = Value(0x0000000000400000)
		val fd_filestat_set_times = Value(0x0000000000800000)
		val path_symlink = Value(0x0000000001000000)
		val path_remove_directory = Value(0x0000000002000000)
		val path_unlink_file = Value(0x0000000004000000)
		val poll_fd_readwrite = Value(0x0000000008000000)
		val sock_shutdown = Value(0x0000000010000000)

	}

	val RIGHTS_ALL = rightsFlags.fd_datasync.id | rightsFlags.fd_read.id | rightsFlags.fd_seek.id | rightsFlags.fd_fdstat_set_flags.id | rightsFlags.fd_sync.id | rightsFlags.fd_tell.id | rightsFlags.fd_write.id | rightsFlags.fd_advise.id | rightsFlags.fd_allocate.id | rightsFlags.fd_filestat_get.id | rightsFlags.fd_filestat_set_size.id | rightsFlags.fd_filestat_set_times.id |
		rightsFlags.poll_fd_readwrite.id | rightsFlags.path_create_directory.id | rightsFlags.path_create_file.id | rightsFlags.path_link_source.id | rightsFlags.path_link_target.id | rightsFlags.path_open.id |
	rightsFlags.fd_readdir.id | rightsFlags.path_readlink.id | rightsFlags.path_rename_source.id | rightsFlags.path_rename_target.id | rightsFlags.fd_filestat_get.id | rightsFlags.fd_filestat_set_size.id | rightsFlags.fd_filestat_set_times.id | rightsFlags.path_symlink.id | rightsFlags.path_remove_directory.id | rightsFlags.path_unlink_file.id | rightsFlags.poll_fd_readwrite.id | rightsFlags.sock_shutdown.id


	val RIGHTS_REGULAR_FILE_BASE = rightsFlags.fd_datasync.id | rightsFlags.fd_read.id | rightsFlags.fd_seek.id | rightsFlags.fd_fdstat_set_flags.id | rightsFlags.fd_sync.id | rightsFlags.fd_tell.id | rightsFlags.fd_write.id | rightsFlags.fd_advise.id | rightsFlags.fd_allocate.id | rightsFlags.fd_filestat_get.id | rightsFlags.fd_filestat_set_size.id | rightsFlags.fd_filestat_set_times.id |
		rightsFlags.poll_fd_readwrite.id
	val RIGHTS_REGULAR_FILE_INHERITING = 0

	val RIGHTS_BLOCK_DEVICE_INHERITING = RIGHTS_ALL
	val RIGHTS_CHARACTER_DEVICE_BASE = RIGHTS_ALL
	val RIGHTS_CHARACTER_DEVICE_INHERITING = RIGHTS_ALL

	val RIGHTS_DIRECTORY_BASE = rightsFlags.fd_fdstat_set_flags.id | rightsFlags.fd_sync.id | rightsFlags.fd_advise.id | rightsFlags.path_create_directory.id | rightsFlags.path_create_file.id | rightsFlags.path_link_source.id |   rightsFlags.path_link_target.id | rightsFlags.path_open.id | rightsFlags.fd_readdir.id | rightsFlags.path_readlink.id | rightsFlags.path_rename_source.id | rightsFlags.path_rename_target.id | rightsFlags.path_filestat_get.id |
	rightsFlags.fd_filestat_set_size.id | rightsFlags.fd_filestat_set_times.id | rightsFlags.fd_filestat_get.id | rightsFlags.fd_filestat_set_times.id | rightsFlags.path_symlink.id | rightsFlags.path_unlink_file.id | rightsFlags.path_remove_directory.id | rightsFlags.poll_fd_readwrite.id
	val RIGHTS_DIRECTORY_INHERITING = RIGHTS_DIRECTORY_BASE | RIGHTS_REGULAR_FILE_BASE


	val RIGHTS_SOCKET_BASE = rightsFlags.fd_read.id | rightsFlags.fd_fdstat_set_flags.id | rightsFlags.fd_write.id | rightsFlags.fd_filestat_get.id | rightsFlags.poll_fd_readwrite.id | rightsFlags.sock_shutdown.id
	val RIGHTS_SOCKET_INHERITING = RIGHTS_ALL;

	object preopentypeEnum extends Enumeration {
		val `dir` = Value
	}

	object eventrwflagsFlags extends Enumeration {
		val fd_readwrite_hangup = Value(0)
	}

	object fdflagsFlags extends Enumeration {
		val append = Value(0x0001)
		val dsync = Value(0x0002)
		val nonblock = Value(0x0004)
		val rsync = Value(0x0008)
		val sync = Value(0x0010)
	}


	type device = u64
	type u16 = Short

	case class `prestat_dir`(mem: ByteBuffer, offset: Int) extends WASI_STRUCT {
		val `pr_name_len` = mem.getInt(offset + 0)


		def write(offset: Int, mem: ByteBuffer) = {
			mem.putInt(offset + 0, `pr_name_len`)

		}
	}

}