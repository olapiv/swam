package swam
package wasi
object Types {

	// This is an autogenerated file, do not change it

	sealed trait Pointer[T]

	object subclockflagsFlags extends Enumeration {
		val subscription_clock_abstime = Value(0)
	}

	type ciovec_array = Array[ciovec]
	type exitcode = u32

	case class `prestat`(`dir`: prestat_dir)

	type inode = u64
	type fd = Int

	object adviceEnum extends Enumeration {
		val `normal`, `sequential`, `random`, `willneed`, `dontneed`, `noreuse` = Value
	}

	type s64 = Long
	type u8 = Byte

	case class `fdstat`(`fs_filetype`: filetypeEnum.Value, `fs_flags`: fdflagsFlags.Value, `fs_rights_base`: rightsFlags.Value, `fs_rights_inheriting`: rightsFlags.Value)

	case class `ciovec`(`buf`: Pointer[u8], `buf_len`: size)

	object signalEnum extends Enumeration {
		val `none`, `hup`, `int`, `quit`, `ill`, `trap`, `abrt`, `bus`, `fpe`, `kill`, `usr1`, `segv`, `usr2`, `pipe`, `alrm`, `term`, `chld`, `cont`, `stop`, `tstp`, `ttin`, `ttou`, `urg`, `xcpu`, `xfsz`, `vtalrm`, `prof`, `winch`, `poll`, `pwr`, `sys` = Value
	}

	type dirnamlen = u32
	type userdata = u64

	case class `subscription_clock`(`id`: clockidEnum.Value, `timeout`: timestamp, `precision`: timestamp, `flags`: subclockflagsFlags.Value)

	object eventtypeEnum extends Enumeration {
		val `clock`, `fd_read`, `fd_write` = Value
	}

	type filesize = u64
	type u32 = Int
	type filedelta = s64

	object errnoEnum extends Enumeration {
		val `success`, `2big`, `acces`, `addrinuse`, `addrnotavail`, `afnosupport`, `again`, `already`, `badf`, `badmsg`, `busy`, `canceled`, `child`, `connaborted`, `connrefused`, `connreset`, `deadlk`, `destaddrreq`, `dom`, `dquot`, `exist`, `fault`, `fbig`, `hostunreach`, `idrm`, `ilseq`, `inprogress`, `intr`, `inval`, `io`, `isconn`, `isdir`, `loop`, `mfile`, `mlink`, `msgsize`, `multihop`, `nametoolong`, `netdown`, `netreset`, `netunreach`, `nfile`, `nobufs`, `nodev`, `noent`, `noexec`, `nolck`, `nolink`, `nomem`, `nomsg`, `noprotoopt`, `nospc`, `nosys`, `notconn`, `notdir`, `notempty`, `notrecoverable`, `notsock`, `notsup`, `notty`, `nxio`, `overflow`, `ownerdead`, `perm`, `pipe`, `proto`, `protonosupport`, `prototype`, `range`, `rofs`, `spipe`, `srch`, `stale`, `timedout`, `txtbsy`, `xdev`, `notcapable` = Value
	}

	object lookupflagsFlags extends Enumeration {
		val symlink_follow = Value(0)
	}

	type timestamp = u64
	type size = u32

	case class `dirent`(`d_next`: dircookie, `d_ino`: inode, `d_namlen`: dirnamlen, `d_type`: filetypeEnum.Value)

	case class `subscription_fd_readwrite`(`file_descriptor`: fd)

	case class `event`(`userdata`: userdata, `error`: errnoEnum.Value, `type`: eventtypeEnum.Value, `fd_readwrite`: event_fd_readwrite)

	case class `filestat`(`dev`: device, `ino`: inode, `filetype`: filetypeEnum.Value, `nlink`: linkcount, `size`: filesize, `atim`: timestamp, `mtim`: timestamp, `ctim`: timestamp)

	object filetypeEnum extends Enumeration {
		val `unknown`, `block_device`, `character_device`, `directory`, `regular_file`, `socket_dgram`, `socket_stream`, `symbolic_link` = Value
	}

	object sdflagsFlags extends Enumeration {
		val rd = Value(0)
		val wr = Value(1)
	}

	case class `subscription`(`userdata`: userdata, `u`: subscription_u)

	type string = String

	object fstflagsFlags extends Enumeration {
		val atim = Value(0)
		val atim_now = Value(1)
		val mtim = Value(2)
		val mtim_now = Value(3)
	}

	object roflagsFlags extends Enumeration {
		val recv_data_truncated = Value(0)
	}

	type dircookie = u64
	type iovec_array = Array[iovec]

	object riflagsFlags extends Enumeration {
		val recv_peek = Value(0)
		val recv_waitall = Value(1)
	}

	case class `event_fd_readwrite`(`nbytes`: filesize, `flags`: eventrwflagsFlags.Value)

	type u64 = Long

	case class `subscription_u`(`clock`: subscription_clock, `fd_read`: subscription_fd_readwrite, `fd_write`: subscription_fd_readwrite)

	object clockidEnum extends Enumeration {
		val `realtime`, `monotonic`, `process_cputime_id`, `thread_cputime_id` = Value
	}

	case class `iovec`(`buf`: Pointer[u8], `buf_len`: size)

	object oflagsFlags extends Enumeration {
		val creat = Value(0)
		val directory = Value(1)
		val excl = Value(2)
		val trunc = Value(3)
	}

	object whenceEnum extends Enumeration {
		val `set`, `cur`, `end` = Value
	}

	type siflags = u16
	type linkcount = u64

	object rightsFlags extends Enumeration {
		val fd_datasync = Value(0)
		val fd_read = Value(1)
		val fd_seek = Value(2)
		val fd_fdstat_set_flags = Value(3)
		val fd_sync = Value(4)
		val fd_tell = Value(5)
		val fd_write = Value(6)
		val fd_advise = Value(7)
		val fd_allocate = Value(8)
		val path_create_directory = Value(9)
		val path_create_file = Value(10)
		val path_link_source = Value(11)
		val path_link_target = Value(12)
		val path_open = Value(13)
		val fd_readdir = Value(14)
		val path_readlink = Value(15)
		val path_rename_source = Value(16)
		val path_rename_target = Value(17)
		val path_filestat_get = Value(18)
		val path_filestat_set_size = Value(19)
		val path_filestat_set_times = Value(20)
		val fd_filestat_get = Value(21)
		val fd_filestat_set_size = Value(22)
		val fd_filestat_set_times = Value(23)
		val path_symlink = Value(24)
		val path_remove_directory = Value(25)
		val path_unlink_file = Value(26)
		val poll_fd_readwrite = Value(27)
		val sock_shutdown = Value(28)
	}

	object preopentypeEnum extends Enumeration {
		val `dir` = Value
	}

	object eventrwflagsFlags extends Enumeration {
		val fd_readwrite_hangup = Value(0)
	}

	object fdflagsFlags extends Enumeration {
		val append = Value(0)
		val dsync = Value(1)
		val nonblock = Value(2)
		val rsync = Value(3)
		val sync = Value(4)
	}

	type device = u64
	type u16 = Short

	case class `prestat_dir`(`pr_name_len`: size)

}